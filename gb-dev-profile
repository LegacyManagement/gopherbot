#!/bin/bash

# gb-dev-profile - generate an environment file for robot development

usage(){
	cat >&2 <<EOF

gb-dev-profile - Generate an environment file for Gopherbot robot
development.

Usage:
$ gb-dev-profile [-s <path/to/private-key> ] [-o <file>] [-i] <path/to/.env> (> myrobot.env)

Options:
-o <file>  : write the dev profile out to the given file
-s <path>  : use the ssh private key at the provided path
-i         : update the env file in place
EOF
	exit 1
}

if [ ! -e "$HOME/.gitconfig" ]
then
	echo "Error: missing required $HOME/.gitconfig"
	usage
fi

while getopts ":e:io:s:u:" OPT; do
    case $OPT in
	e )
		GIT_EMAIL="$OPTARG"
		;;
	i )
		INPLACE="true"
		;;
	u )
		GIT_USER="$OPTARG"
		;;
	o )
		OUT_FILE="$OPTARG"
		;;
    s )
        PRIVATE_KEY="$OPTARG"
        ;;
    \? )
        echo "Invalid option: $OPTARG" >&2
		usage
        ;;
    esac
done
shift $((OPTIND -1))

if [ ! "$1" ]
then
	usage
fi

if [ "$INPLACE" ]
then
	OUT_FILE="$1"
fi

if [ ! "$PRIVATE_KEY" ]
then
	PRIVATE_KEY=$(ls $HOME/.ssh/id_* | head -1)
	if [ "$PRIVATE_KEY" ]
	then
		echo "Using $PRIVATE_KEY for your coding key, override with '-s $HOME/.ssh/<file>'" >&2
	else
		echo "Unable to automatically determine private key file, use '-s $HOME/.ssh/<file>'" >&2
		echo
	fi
else
	echo "Using $PRIVATE_KEY for your coding key"
fi

if [ ! -e "$PRIVATE_KEY" ]
then
	echo "Error: no '$PRIVATE_KEY' found, set with '-s' option."
	usage
fi

BOTENV="$1"
if [ ! -e "$BOTENV" ]
then
	if [ -e "$BOTENV.env" ]
	then
		BOTENV="$BOTENV.env"
	else
		usage
	fi
fi

source $BOTENV
for GVAR in GOPHER_ENCRYPTION_KEY GOPHER_CUSTOM_REPOSITORY GOPHER_DEPLOY_KEY
do
	if [ ! "${!GVAR}" ]
	then
		echo "Invalid environment file '$BOTENV', '$GVAR' not defined."
		usage
	fi
done

GIT_USER=$(git config --get user.name)
GIT_EMAIL=$(git config --get user.email)
for GVAR in user.name:GIT_USER user.email:GIT_EMAIL
do
	TAG=${GVAR%:*}
	GVAR=${GVAR#*:}
	if [ ! "${!GVAR}" ]
	then
	cat <<EOF
Error: Missing required git setting '$TAG' in $HOME/.gitconfig; configure git with e.g.:
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
EOF
		usage
	fi
done

SSH_PRIVATE_KEY=$(cat $PRIVATE_KEY | openssl base64 -e -A)
KEY_NAME=$(basename $PRIVATE_KEY)

generate(){
	cat <<EOF
# Generated by 'gb-dev-profile'
GOPHER_DEV_PROFILE=true
GOPHER_ENCRYPTION_KEY=$GOPHER_ENCRYPTION_KEY
GOPHER_CUSTOM_REPOSITORY=$GOPHER_CUSTOM_REPOSITORY
GOPHER_DEPLOY_KEY=$GOPHER_DEPLOY_KEY
# Defaulted by gb-dev-profile
GOPHER_PROTOCOL=terminal
GIT_AUTHOR_NAME="$GIT_USER"
GIT_AUTHOR_EMAIL="$GIT_EMAIL"
GIT_COMMITTER_NAME="$GIT_USER"
GIT_COMMITTER_EMAIL="$GIT_EMAIL"
DEV_PRIVATE_KEY=$SSH_PRIVATE_KEY
DEV_KEY_NAME="$KEY_NAME"
EOF
}

if [ "$OUT_FILE" ]
then
	generate > "$OUT_FILE"
else
	generate
fi
