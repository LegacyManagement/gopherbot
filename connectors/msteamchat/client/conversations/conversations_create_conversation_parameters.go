package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/uva-its/gopherbot/connectors/msteamchat/models"
)

// NewConversationsCreateConversationParams creates a new ConversationsCreateConversationParams object
// with the default values initialized.
func NewConversationsCreateConversationParams() *ConversationsCreateConversationParams {
	var ()
	return &ConversationsCreateConversationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewConversationsCreateConversationParamsWithTimeout creates a new ConversationsCreateConversationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewConversationsCreateConversationParamsWithTimeout(timeout time.Duration) *ConversationsCreateConversationParams {
	var ()
	return &ConversationsCreateConversationParams{

		timeout: timeout,
	}
}

// NewConversationsCreateConversationParamsWithContext creates a new ConversationsCreateConversationParams object
// with the default values initialized, and the ability to set a context for a request
func NewConversationsCreateConversationParamsWithContext(ctx context.Context) *ConversationsCreateConversationParams {
	var ()
	return &ConversationsCreateConversationParams{

		Context: ctx,
	}
}

/*ConversationsCreateConversationParams contains all the parameters to send to the API endpoint
for the conversations create conversation operation typically these are written to a http.Request
*/
type ConversationsCreateConversationParams struct {

	/*Parameters
	  Parameters to create the conversation from

	*/
	Parameters *models.ConversationParameters

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the conversations create conversation params
func (o *ConversationsCreateConversationParams) WithTimeout(timeout time.Duration) *ConversationsCreateConversationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the conversations create conversation params
func (o *ConversationsCreateConversationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the conversations create conversation params
func (o *ConversationsCreateConversationParams) WithContext(ctx context.Context) *ConversationsCreateConversationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the conversations create conversation params
func (o *ConversationsCreateConversationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithParameters adds the parameters to the conversations create conversation params
func (o *ConversationsCreateConversationParams) WithParameters(parameters *models.ConversationParameters) *ConversationsCreateConversationParams {
	o.SetParameters(parameters)
	return o
}

// SetParameters adds the parameters to the conversations create conversation params
func (o *ConversationsCreateConversationParams) SetParameters(parameters *models.ConversationParameters) {
	o.Parameters = parameters
}

// WriteToRequest writes these params to a swagger request
func (o *ConversationsCreateConversationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Parameters == nil {
		o.Parameters = new(models.ConversationParameters)
	}

	if err := r.SetBodyParam(o.Parameters); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
