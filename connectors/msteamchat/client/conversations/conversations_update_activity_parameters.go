package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/uva-its/gopherbot/connectors/msteamchat/models"
)

// NewConversationsUpdateActivityParams creates a new ConversationsUpdateActivityParams object
// with the default values initialized.
func NewConversationsUpdateActivityParams() *ConversationsUpdateActivityParams {
	var ()
	return &ConversationsUpdateActivityParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewConversationsUpdateActivityParamsWithTimeout creates a new ConversationsUpdateActivityParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewConversationsUpdateActivityParamsWithTimeout(timeout time.Duration) *ConversationsUpdateActivityParams {
	var ()
	return &ConversationsUpdateActivityParams{

		timeout: timeout,
	}
}

// NewConversationsUpdateActivityParamsWithContext creates a new ConversationsUpdateActivityParams object
// with the default values initialized, and the ability to set a context for a request
func NewConversationsUpdateActivityParamsWithContext(ctx context.Context) *ConversationsUpdateActivityParams {
	var ()
	return &ConversationsUpdateActivityParams{

		Context: ctx,
	}
}

/*ConversationsUpdateActivityParams contains all the parameters to send to the API endpoint
for the conversations update activity operation typically these are written to a http.Request
*/
type ConversationsUpdateActivityParams struct {

	/*Activity
	  replacement Activity

	*/
	Activity *models.Activity
	/*ActivityID
	  activityId to update

	*/
	ActivityID string
	/*ConversationID
	  Conversation ID

	*/
	ConversationID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the conversations update activity params
func (o *ConversationsUpdateActivityParams) WithTimeout(timeout time.Duration) *ConversationsUpdateActivityParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the conversations update activity params
func (o *ConversationsUpdateActivityParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the conversations update activity params
func (o *ConversationsUpdateActivityParams) WithContext(ctx context.Context) *ConversationsUpdateActivityParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the conversations update activity params
func (o *ConversationsUpdateActivityParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithActivity adds the activity to the conversations update activity params
func (o *ConversationsUpdateActivityParams) WithActivity(activity *models.Activity) *ConversationsUpdateActivityParams {
	o.SetActivity(activity)
	return o
}

// SetActivity adds the activity to the conversations update activity params
func (o *ConversationsUpdateActivityParams) SetActivity(activity *models.Activity) {
	o.Activity = activity
}

// WithActivityID adds the activityID to the conversations update activity params
func (o *ConversationsUpdateActivityParams) WithActivityID(activityID string) *ConversationsUpdateActivityParams {
	o.SetActivityID(activityID)
	return o
}

// SetActivityID adds the activityId to the conversations update activity params
func (o *ConversationsUpdateActivityParams) SetActivityID(activityID string) {
	o.ActivityID = activityID
}

// WithConversationID adds the conversationID to the conversations update activity params
func (o *ConversationsUpdateActivityParams) WithConversationID(conversationID string) *ConversationsUpdateActivityParams {
	o.SetConversationID(conversationID)
	return o
}

// SetConversationID adds the conversationId to the conversations update activity params
func (o *ConversationsUpdateActivityParams) SetConversationID(conversationID string) {
	o.ConversationID = conversationID
}

// WriteToRequest writes these params to a swagger request
func (o *ConversationsUpdateActivityParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Activity == nil {
		o.Activity = new(models.Activity)
	}

	if err := r.SetBodyParam(o.Activity); err != nil {
		return err
	}

	// path param activityId
	if err := r.SetPathParam("activityId", o.ActivityID); err != nil {
		return err
	}

	// path param conversationId
	if err := r.SetPathParam("conversationId", o.ConversationID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
