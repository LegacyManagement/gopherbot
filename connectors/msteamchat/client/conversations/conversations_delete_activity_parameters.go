package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewConversationsDeleteActivityParams creates a new ConversationsDeleteActivityParams object
// with the default values initialized.
func NewConversationsDeleteActivityParams() *ConversationsDeleteActivityParams {
	var ()
	return &ConversationsDeleteActivityParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewConversationsDeleteActivityParamsWithTimeout creates a new ConversationsDeleteActivityParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewConversationsDeleteActivityParamsWithTimeout(timeout time.Duration) *ConversationsDeleteActivityParams {
	var ()
	return &ConversationsDeleteActivityParams{

		timeout: timeout,
	}
}

// NewConversationsDeleteActivityParamsWithContext creates a new ConversationsDeleteActivityParams object
// with the default values initialized, and the ability to set a context for a request
func NewConversationsDeleteActivityParamsWithContext(ctx context.Context) *ConversationsDeleteActivityParams {
	var ()
	return &ConversationsDeleteActivityParams{

		Context: ctx,
	}
}

/*ConversationsDeleteActivityParams contains all the parameters to send to the API endpoint
for the conversations delete activity operation typically these are written to a http.Request
*/
type ConversationsDeleteActivityParams struct {

	/*ActivityID
	  activityId to delete

	*/
	ActivityID string
	/*ConversationID
	  Conversation ID

	*/
	ConversationID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the conversations delete activity params
func (o *ConversationsDeleteActivityParams) WithTimeout(timeout time.Duration) *ConversationsDeleteActivityParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the conversations delete activity params
func (o *ConversationsDeleteActivityParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the conversations delete activity params
func (o *ConversationsDeleteActivityParams) WithContext(ctx context.Context) *ConversationsDeleteActivityParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the conversations delete activity params
func (o *ConversationsDeleteActivityParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithActivityID adds the activityID to the conversations delete activity params
func (o *ConversationsDeleteActivityParams) WithActivityID(activityID string) *ConversationsDeleteActivityParams {
	o.SetActivityID(activityID)
	return o
}

// SetActivityID adds the activityId to the conversations delete activity params
func (o *ConversationsDeleteActivityParams) SetActivityID(activityID string) {
	o.ActivityID = activityID
}

// WithConversationID adds the conversationID to the conversations delete activity params
func (o *ConversationsDeleteActivityParams) WithConversationID(conversationID string) *ConversationsDeleteActivityParams {
	o.SetConversationID(conversationID)
	return o
}

// SetConversationID adds the conversationId to the conversations delete activity params
func (o *ConversationsDeleteActivityParams) SetConversationID(conversationID string) {
	o.ConversationID = conversationID
}

// WriteToRequest writes these params to a swagger request
func (o *ConversationsDeleteActivityParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param activityId
	if err := r.SetPathParam("activityId", o.ActivityID); err != nil {
		return err
	}

	// path param conversationId
	if err := r.SetPathParam("conversationId", o.ConversationID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
