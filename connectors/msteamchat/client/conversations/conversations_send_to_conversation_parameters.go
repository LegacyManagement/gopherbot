package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/uva-its/gopherbot/connectors/msteamchat/models"
)

// NewConversationsSendToConversationParams creates a new ConversationsSendToConversationParams object
// with the default values initialized.
func NewConversationsSendToConversationParams() *ConversationsSendToConversationParams {
	var ()
	return &ConversationsSendToConversationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewConversationsSendToConversationParamsWithTimeout creates a new ConversationsSendToConversationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewConversationsSendToConversationParamsWithTimeout(timeout time.Duration) *ConversationsSendToConversationParams {
	var ()
	return &ConversationsSendToConversationParams{

		timeout: timeout,
	}
}

// NewConversationsSendToConversationParamsWithContext creates a new ConversationsSendToConversationParams object
// with the default values initialized, and the ability to set a context for a request
func NewConversationsSendToConversationParamsWithContext(ctx context.Context) *ConversationsSendToConversationParams {
	var ()
	return &ConversationsSendToConversationParams{

		Context: ctx,
	}
}

/*ConversationsSendToConversationParams contains all the parameters to send to the API endpoint
for the conversations send to conversation operation typically these are written to a http.Request
*/
type ConversationsSendToConversationParams struct {

	/*Activity
	  Activity to send

	*/
	Activity *models.Activity
	/*ConversationID
	  Conversation ID

	*/
	ConversationID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the conversations send to conversation params
func (o *ConversationsSendToConversationParams) WithTimeout(timeout time.Duration) *ConversationsSendToConversationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the conversations send to conversation params
func (o *ConversationsSendToConversationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the conversations send to conversation params
func (o *ConversationsSendToConversationParams) WithContext(ctx context.Context) *ConversationsSendToConversationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the conversations send to conversation params
func (o *ConversationsSendToConversationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithActivity adds the activity to the conversations send to conversation params
func (o *ConversationsSendToConversationParams) WithActivity(activity *models.Activity) *ConversationsSendToConversationParams {
	o.SetActivity(activity)
	return o
}

// SetActivity adds the activity to the conversations send to conversation params
func (o *ConversationsSendToConversationParams) SetActivity(activity *models.Activity) {
	o.Activity = activity
}

// WithConversationID adds the conversationID to the conversations send to conversation params
func (o *ConversationsSendToConversationParams) WithConversationID(conversationID string) *ConversationsSendToConversationParams {
	o.SetConversationID(conversationID)
	return o
}

// SetConversationID adds the conversationId to the conversations send to conversation params
func (o *ConversationsSendToConversationParams) SetConversationID(conversationID string) {
	o.ConversationID = conversationID
}

// WriteToRequest writes these params to a swagger request
func (o *ConversationsSendToConversationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Activity == nil {
		o.Activity = new(models.Activity)
	}

	if err := r.SetBodyParam(o.Activity); err != nil {
		return err
	}

	// path param conversationId
	if err := r.SetPathParam("conversationId", o.ConversationID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
