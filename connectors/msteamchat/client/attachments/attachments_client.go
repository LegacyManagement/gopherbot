package attachments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new attachments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for attachments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AttachmentsGetAttachment gets attachment

Get the named view as binary content
*/
func (a *Client) AttachmentsGetAttachment(params *AttachmentsGetAttachmentParams) (*AttachmentsGetAttachmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttachmentsGetAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Attachments_GetAttachment",
		Method:             "GET",
		PathPattern:        "/v3/attachments/{attachmentId}/views/{viewId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AttachmentsGetAttachmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AttachmentsGetAttachmentOK), nil

}

/*
AttachmentsGetAttachmentInfo gets attachment info

Get AttachmentInfo structure describing the attachment views
*/
func (a *Client) AttachmentsGetAttachmentInfo(params *AttachmentsGetAttachmentInfoParams) (*AttachmentsGetAttachmentInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttachmentsGetAttachmentInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Attachments_GetAttachmentInfo",
		Method:             "GET",
		PathPattern:        "/v3/attachments/{attachmentId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AttachmentsGetAttachmentInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AttachmentsGetAttachmentInfoOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
