package attachments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/uva-its/gopherbot/connectors/msteamchat/models"
)

// AttachmentsGetAttachmentReader is a Reader for the AttachmentsGetAttachment structure.
type AttachmentsGetAttachmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AttachmentsGetAttachmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAttachmentsGetAttachmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 301:
		result := NewAttachmentsGetAttachmentMovedPermanently()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 302:
		result := NewAttachmentsGetAttachmentFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 400:
		result := NewAttachmentsGetAttachmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewAttachmentsGetAttachmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewAttachmentsGetAttachmentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAttachmentsGetAttachmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewAttachmentsGetAttachmentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewAttachmentsGetAttachmentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAttachmentsGetAttachmentOK creates a AttachmentsGetAttachmentOK with default headers values
func NewAttachmentsGetAttachmentOK() *AttachmentsGetAttachmentOK {
	return &AttachmentsGetAttachmentOK{}
}

/*AttachmentsGetAttachmentOK handles this case with default header values.

An array of bytes which represent the content.
*/
type AttachmentsGetAttachmentOK struct {
	Payload runtime.File
}

func (o *AttachmentsGetAttachmentOK) Error() string {
	return fmt.Sprintf("[GET /v3/attachments/{attachmentId}/views/{viewId}][%d] attachmentsGetAttachmentOK  %+v", 200, o.Payload)
}

func (o *AttachmentsGetAttachmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachmentsGetAttachmentMovedPermanently creates a AttachmentsGetAttachmentMovedPermanently with default headers values
func NewAttachmentsGetAttachmentMovedPermanently() *AttachmentsGetAttachmentMovedPermanently {
	return &AttachmentsGetAttachmentMovedPermanently{}
}

/*AttachmentsGetAttachmentMovedPermanently handles this case with default header values.

The Location header describes where the content is now.
*/
type AttachmentsGetAttachmentMovedPermanently struct {
}

func (o *AttachmentsGetAttachmentMovedPermanently) Error() string {
	return fmt.Sprintf("[GET /v3/attachments/{attachmentId}/views/{viewId}][%d] attachmentsGetAttachmentMovedPermanently ", 301)
}

func (o *AttachmentsGetAttachmentMovedPermanently) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAttachmentsGetAttachmentFound creates a AttachmentsGetAttachmentFound with default headers values
func NewAttachmentsGetAttachmentFound() *AttachmentsGetAttachmentFound {
	return &AttachmentsGetAttachmentFound{}
}

/*AttachmentsGetAttachmentFound handles this case with default header values.

The Location header describes where the content is now.
*/
type AttachmentsGetAttachmentFound struct {
}

func (o *AttachmentsGetAttachmentFound) Error() string {
	return fmt.Sprintf("[GET /v3/attachments/{attachmentId}/views/{viewId}][%d] attachmentsGetAttachmentFound ", 302)
}

func (o *AttachmentsGetAttachmentFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAttachmentsGetAttachmentBadRequest creates a AttachmentsGetAttachmentBadRequest with default headers values
func NewAttachmentsGetAttachmentBadRequest() *AttachmentsGetAttachmentBadRequest {
	return &AttachmentsGetAttachmentBadRequest{}
}

/*AttachmentsGetAttachmentBadRequest handles this case with default header values.

The request was malformed or otherwise incorrect. Inspect the message for a more detailed description.
*/
type AttachmentsGetAttachmentBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *AttachmentsGetAttachmentBadRequest) Error() string {
	return fmt.Sprintf("[GET /v3/attachments/{attachmentId}/views/{viewId}][%d] attachmentsGetAttachmentBadRequest  %+v", 400, o.Payload)
}

func (o *AttachmentsGetAttachmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachmentsGetAttachmentUnauthorized creates a AttachmentsGetAttachmentUnauthorized with default headers values
func NewAttachmentsGetAttachmentUnauthorized() *AttachmentsGetAttachmentUnauthorized {
	return &AttachmentsGetAttachmentUnauthorized{}
}

/*AttachmentsGetAttachmentUnauthorized handles this case with default header values.

The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App password.
*/
type AttachmentsGetAttachmentUnauthorized struct {
}

func (o *AttachmentsGetAttachmentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v3/attachments/{attachmentId}/views/{viewId}][%d] attachmentsGetAttachmentUnauthorized ", 401)
}

func (o *AttachmentsGetAttachmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAttachmentsGetAttachmentForbidden creates a AttachmentsGetAttachmentForbidden with default headers values
func NewAttachmentsGetAttachmentForbidden() *AttachmentsGetAttachmentForbidden {
	return &AttachmentsGetAttachmentForbidden{}
}

/*AttachmentsGetAttachmentForbidden handles this case with default header values.

The request was a valid request, but the server is refusing to respond to it. The user might be logged in but does not have the necessary permissions for the resource.
*/
type AttachmentsGetAttachmentForbidden struct {
}

func (o *AttachmentsGetAttachmentForbidden) Error() string {
	return fmt.Sprintf("[GET /v3/attachments/{attachmentId}/views/{viewId}][%d] attachmentsGetAttachmentForbidden ", 403)
}

func (o *AttachmentsGetAttachmentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAttachmentsGetAttachmentNotFound creates a AttachmentsGetAttachmentNotFound with default headers values
func NewAttachmentsGetAttachmentNotFound() *AttachmentsGetAttachmentNotFound {
	return &AttachmentsGetAttachmentNotFound{}
}

/*AttachmentsGetAttachmentNotFound handles this case with default header values.

The resource was not found.
*/
type AttachmentsGetAttachmentNotFound struct {
	Payload *models.ErrorResponse
}

func (o *AttachmentsGetAttachmentNotFound) Error() string {
	return fmt.Sprintf("[GET /v3/attachments/{attachmentId}/views/{viewId}][%d] attachmentsGetAttachmentNotFound  %+v", 404, o.Payload)
}

func (o *AttachmentsGetAttachmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachmentsGetAttachmentInternalServerError creates a AttachmentsGetAttachmentInternalServerError with default headers values
func NewAttachmentsGetAttachmentInternalServerError() *AttachmentsGetAttachmentInternalServerError {
	return &AttachmentsGetAttachmentInternalServerError{}
}

/*AttachmentsGetAttachmentInternalServerError handles this case with default header values.

An internal server has occurred. Inspect the message for a more detailed description.
*/
type AttachmentsGetAttachmentInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *AttachmentsGetAttachmentInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v3/attachments/{attachmentId}/views/{viewId}][%d] attachmentsGetAttachmentInternalServerError  %+v", 500, o.Payload)
}

func (o *AttachmentsGetAttachmentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachmentsGetAttachmentServiceUnavailable creates a AttachmentsGetAttachmentServiceUnavailable with default headers values
func NewAttachmentsGetAttachmentServiceUnavailable() *AttachmentsGetAttachmentServiceUnavailable {
	return &AttachmentsGetAttachmentServiceUnavailable{}
}

/*AttachmentsGetAttachmentServiceUnavailable handles this case with default header values.

The service you are trying to communciate with is unavailable.
*/
type AttachmentsGetAttachmentServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *AttachmentsGetAttachmentServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /v3/attachments/{attachmentId}/views/{viewId}][%d] attachmentsGetAttachmentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *AttachmentsGetAttachmentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
