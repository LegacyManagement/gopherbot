package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
)

// Activity An Activity is the basic communication type for the Bot Framework 3.0 protocol
// swagger:model Activity
type Activity struct {

	// ContactAdded/Removed action
	Action string `json:"action,omitempty"`

	// AttachmentLayout - hint for how to deal with multiple attachments Values: [list|carousel] Default:list
	AttachmentLayout string `json:"attachmentLayout,omitempty"`

	// Attachments
	Attachments []*Attachment `json:"attachments"`

	// Channel specific payload
	ChannelData Object `json:"channelData,omitempty"`

	// ChannelId the activity was on
	ChannelID string `json:"channelId,omitempty"`

	// Conversation
	Conversation *ConversationAccount `json:"conversation,omitempty"`

	// Collection of Entity objects, each of which contains metadata about this activity. Each Entity object is typed.
	Entities []*Entity `json:"entities"`

	// Sender address
	From *ChannelAccount `json:"from,omitempty"`

	// the previous history of the channel was disclosed
	HistoryDisclosed bool `json:"historyDisclosed,omitempty"`

	// Id for the activity
	ID string `json:"id,omitempty"`

	// Local time when message was sent (set by client Ex: 2016-09-23T13:07:49.4714686-07:00)
	LocalTimestamp strfmt.DateTime `json:"localTimestamp,omitempty"`

	// The language code of the Text field
	Locale string `json:"locale,omitempty"`

	// Array of address added
	MembersAdded []*ChannelAccount `json:"membersAdded"`

	// Array of addresses removed
	MembersRemoved []*ChannelAccount `json:"membersRemoved"`

	// (Outbound to bot only) Bot's address that received the message
	Recipient *ChannelAccount `json:"recipient,omitempty"`

	// the original id this message is a response to
	ReplyToID string `json:"replyToId,omitempty"`

	// Service endpoint
	ServiceURL string `json:"serviceUrl,omitempty"`

	// Text to display if you can't render cards
	Summary string `json:"summary,omitempty"`

	// Content for the message
	Text string `json:"text,omitempty"`

	// Format of text fields [plain|markdown] Default:markdown
	TextFormat string `json:"textFormat,omitempty"`

	// UTC Time when message was sent (Set by service)
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`

	// Conversations new topic name
	TopicName string `json:"topicName,omitempty"`

	// The type of the activity [message|contactRelationUpdate|converationUpdate|typing]
	Type string `json:"type,omitempty"`

	// Open ended value
	Value Object `json:"value,omitempty"`
}

// Validate validates this activity
func (m *Activity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachments(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateConversation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEntities(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFrom(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMembersAdded(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMembersRemoved(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRecipient(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Activity) validateAttachments(formats strfmt.Registry) error {

	if swag.IsZero(m.Attachments) { // not required
		return nil
	}

	for i := 0; i < len(m.Attachments); i++ {

		if swag.IsZero(m.Attachments[i]) { // not required
			continue
		}

		if m.Attachments[i] != nil {

			if err := m.Attachments[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Activity) validateConversation(formats strfmt.Registry) error {

	if swag.IsZero(m.Conversation) { // not required
		return nil
	}

	if m.Conversation != nil {

		if err := m.Conversation.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Activity) validateEntities(formats strfmt.Registry) error {

	if swag.IsZero(m.Entities) { // not required
		return nil
	}

	for i := 0; i < len(m.Entities); i++ {

		if swag.IsZero(m.Entities[i]) { // not required
			continue
		}

		if m.Entities[i] != nil {

			if err := m.Entities[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Activity) validateFrom(formats strfmt.Registry) error {

	if swag.IsZero(m.From) { // not required
		return nil
	}

	if m.From != nil {

		if err := m.From.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Activity) validateMembersAdded(formats strfmt.Registry) error {

	if swag.IsZero(m.MembersAdded) { // not required
		return nil
	}

	for i := 0; i < len(m.MembersAdded); i++ {

		if swag.IsZero(m.MembersAdded[i]) { // not required
			continue
		}

		if m.MembersAdded[i] != nil {

			if err := m.MembersAdded[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Activity) validateMembersRemoved(formats strfmt.Registry) error {

	if swag.IsZero(m.MembersRemoved) { // not required
		return nil
	}

	for i := 0; i < len(m.MembersRemoved); i++ {

		if swag.IsZero(m.MembersRemoved[i]) { // not required
			continue
		}

		if m.MembersRemoved[i] != nil {

			if err := m.MembersRemoved[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Activity) validateRecipient(formats strfmt.Registry) error {

	if swag.IsZero(m.Recipient) { // not required
		return nil
	}

	if m.Recipient != nil {

		if err := m.Recipient.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
