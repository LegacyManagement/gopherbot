package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
)

// ConversationParameters Parameters for creating a new conversation
// swagger:model ConversationParameters
type ConversationParameters struct {

	// (Optional) When creating a new conversation, use this activity as the intial message to the conversation
	Activity *Activity `json:"activity,omitempty"`

	// The bot address for this conversation
	Bot *ChannelAccount `json:"bot,omitempty"`

	// Channel specific payload
	ChannelData Object `json:"channelData,omitempty"`

	// IsGroup
	IsGroup bool `json:"isGroup,omitempty"`

	// Members to add to the conversation
	Members []*ChannelAccount `json:"members"`

	// (Optional) Topic of the conversation (if supported by the channel)
	TopicName string `json:"topicName,omitempty"`
}

// Validate validates this conversation parameters
func (m *ConversationParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBot(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConversationParameters) validateActivity(formats strfmt.Registry) error {

	if swag.IsZero(m.Activity) { // not required
		return nil
	}

	if m.Activity != nil {

		if err := m.Activity.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ConversationParameters) validateBot(formats strfmt.Registry) error {

	if swag.IsZero(m.Bot) { // not required
		return nil
	}

	if m.Bot != nil {

		if err := m.Bot.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ConversationParameters) validateMembers(formats strfmt.Registry) error {

	if swag.IsZero(m.Members) { // not required
		return nil
	}

	for i := 0; i < len(m.Members); i++ {

		if swag.IsZero(m.Members[i]) { // not required
			continue
		}

		if m.Members[i] != nil {

			if err := m.Members[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
