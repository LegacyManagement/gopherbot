#!/usr/bin/ruby

# boilerplate
require ENV["GOPHER_INSTALLDIR"] + '/lib/rubylib'

bot = Robot.new()
# /boilerplate

=begin
The defaultConfig is a multi-line YAML formatted document that specifies
this plugins default configuration for Gopherbot. It may include any of the
fields in https://godoc.org/github.com/parsley42/gopherbot/bot#Plugin, as
well as arbitrary YAML for config data that a bot admin might want to
override.
=end
defaultConfig = <<'DEFCONFIG'
Channels: [ "botdev", "random" ]
Help:
- Keywords: [ "ruby" ]
  Helptext: [ "(bot), ruby (me!) - prove that ruby plugins work" ]
- Keywords: [ "listen" ]
  Helptext: [ "(bot), listen (to me!) - ask a question" ]
- Keywords: [ "remember", "memory" ]
  Helptext: [ "(bot), remember <anything> - prove the robot has a brain(tm)" ]
- Keywords: [ "recall", "memory" ]
  Helptext: [ "(bot), recall - prove the robot has a brain(tm)" ]
- Keywords: [ "forget", "memory" ]
  Helptext: [ "(bot), forget <#> - ask the robot to forget one of it's remembered 'facts'" ]
CommandMatches:
- Regex: (?i:ruby( me)?!?)
  Command: ruby
- Regex: (?i:listen( to me)?!?)
  Command: listen
- Regex: (?i:remember ([-\w .,!?]+))
  Command: remember
- Regex: (?i:(?:recall|memories))
  Command: recall
- Regex: (?i:forget ([\d]{1,2}))
  Command: forget
Config:
  Replies:
  - "Consider yourself rubied"
  - "Waaaaaait a second... what do you mean by that?"
  - "I'll ruby you, but not right now - I'll wait 'til you're least expecting it..."
  - "Crap, sorry - all out of rubies"
DEFCONFIG

command = ARGV.shift()

case command
when "configure"
	puts defaultConfig
	exit
when "ruby"
	bot.Say("Sure, #{bot.GetSenderAttribute("firstName")}!")
	sleep 1.5
	bot.Say(bot.RandomString(bot.GetPluginConfig()["Replies"]))
when "listen"
	bot.Say("Ok, what do you want to tell me?")
	rep = bot.WaitForReply("SimpleString")
	if rep.ret == Robot::Ok
		bot.Say("I hear what you're saying - '#{rep}'")
	else
		bot.Say("I'm sorry, I'm not sure what you're trying to tell me")
	end
when "remember"
	thing = ARGV[0]
	bot.Say("Ok, I'll remember \"#{thing}\"")
	memory = bot.CheckoutDatum("memory", true)
	if memory.exists
		memory.datum.push(thing)
	else
		memory.datum = [ thing ]
	end
	ret = bot.UpdateDatum(memory)
	if ret != Robot::Ok
		bot.Say("Dang it, having problems with my memory")
	end
when "recall"
	reply = "Here's what I remember:\n"
	memory = bot.CheckoutDatum("memory", false)
	memory.datum.each_index { |i|
		index = i + 1
		reply += index.to_s + ": " + memory.datum[i] + "\n"
	}
	bot.CheckinDatum(memory)
	bot.Say(reply)
when "forget"
	i = ARGV[0].to_i - 1
	memory = bot.CheckoutDatum("memory", true)
	memories = memory.datum
	if i > 0 && memories[i]
		bot.Say("Ok, I'll forget \"#{memories[i]}\"")
		memories.delete_at(i)
		bot.UpdateDatum(memory)
	else
		bot.Say("Gosh, I guess I never remembered that in the first place!")
	end
end
